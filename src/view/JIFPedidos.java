package view;

import java.awt.Graphics;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.*;
import model.*;
import data.*;
import utils.*;
import java.util.ArrayList;
import java.sql.*;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.PlainDocument;

public class JIFPedidos extends javax.swing.JInternalFrame {

    Campos campos;
    Paineis paineis;
    ArrayList<String> filtros;
    Pedido pedido;
    PedidoDAO pedidoDAO;
    ItemPedido itemPedido;
    ItemPedidoDAO itemPedidoDAO;
    ListSelectionModel listSelectionModel;
    
    public JIFPedidos() {
        initComponents();
        
        //Filtro que impossibilita os filtros de receberem caracteres que não sejam números.
        PlainDocument docCliente = (PlainDocument) jtfCliente.getDocument();
        docCliente.setDocumentFilter(new FiltroDigitos());
        
        PlainDocument docDataInicial = (PlainDocument) jtfDataInicial.getDocument();
        docDataInicial.setDocumentFilter(new FiltroDigitos());
        
        PlainDocument docDataFinal = (PlainDocument) jtfDataFinal.getDocument();
        docDataFinal.setDocumentFilter(new FiltroDigitos());
        
        try {
            campos = new Campos();
            paineis = new Paineis();
            filtros = new ArrayList<>();
            pedido = new Pedido();
            pedidoDAO = new PedidoDAO();
            itemPedido = new ItemPedido();
            itemPedidoDAO = new ItemPedidoDAO();
        } catch (Exception e) {
            System.out.println("Erro ao inicializar instância de " + e.getMessage());
        }
        
        try {
            preencherTabela(jtPedido, pedidoDAO.preencherResultSet());
            configurarLarguraTabelaPedido();
            configurarLarguraTabelaItensPedido();
        } catch (Exception e) {
            System.out.println("Erro ao preencher tabela: " + e.getMessage());
        }

        //Permite seleção única de linhas.
        listSelectionModel = jtPedido.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandler());
	jtPedido.setSelectionModel(listSelectionModel);
        listSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        listSelectionModel = jtItensPedido.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandler());
        jtItensPedido.setSelectionModel(listSelectionModel);
        listSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    
    class SharedListSelectionHandler implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent evt) {
            ListSelectionModel lsm = (ListSelectionModel) evt.getSource();

            if (jtPedido.isFocusOwner()) {
                if (!lsm.isSelectionEmpty()) {
                    try {
                        int codigoPedido = Integer.parseInt(jtPedido.getValueAt(jtPedido.getSelectedRow(), 0).toString());
                        preencherTabela(jtItensPedido, itemPedidoDAO.preencherResultSet(codigoPedido));
                    } catch (Exception e) {
                        System.out.println("Erro ao preencher tabela: " + e.getMessage());
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jpNorte = new javax.swing.JPanel();
        ImageIcon iconBotaoFechar = new ImageIcon(getClass().getResource("/images/Comum/BotaoFechar.png"));
        Image botaoFechar = iconBotaoFechar.getImage();
        jpFechar = new javax.swing.JPanel() {
            public void paintComponent(Graphics g) {
                g.drawImage(botaoFechar, 0, 0, getWidth(), getHeight(), this);
            }
        };
        jpCentro = new javax.swing.JPanel();
        jlPedido = new javax.swing.JLabel();
        jspTabelaPedido = new javax.swing.JScrollPane();
        jtPedido = new javax.swing.JTable();
        jpPesquisa = new javax.swing.JPanel();
        jlDataInicial = new javax.swing.JLabel();
        jtfDataInicial = new javax.swing.JTextField();
        jlDataFinal = new javax.swing.JLabel();
        jtfDataFinal = new javax.swing.JTextField();
        jlCliente = new javax.swing.JLabel();
        jtfCliente = new javax.swing.JTextField();
        jlItensPedido = new javax.swing.JLabel();
        jspTabelaItensPedido = new javax.swing.JScrollPane();
        jtItensPedido = new javax.swing.JTable();
        jpSul = new javax.swing.JPanel();
        ImageIcon iconBotaoVerificar = new ImageIcon(getClass().getResource("/images/Comum/BotaoVerificar.png"));
        Image botaoVerificar = iconBotaoVerificar.getImage();
        jpBotaoVerificar = new javax.swing.JPanel() {
            public void paintComponent(Graphics g) {
                g.drawImage(botaoVerificar, 0, 0, getWidth(), getHeight(), this);
            }
        };
        ImageIcon iconBotaoCancelar = new ImageIcon(getClass().getResource("/images/Comum/BotaoCancelar.png"));
        Image botaoCancelar = iconBotaoCancelar.getImage();
        jpBotaoCancelar = new javax.swing.JPanel() {
            public void paintComponent(Graphics g) {
                g.drawImage(botaoCancelar, 0, 0, getWidth(), getHeight(), this);
            }
        };

        setBorder(null);
        setFrameIcon(null);
        setMaximumSize(new java.awt.Dimension(1152, 720));

        jpNorte.setBackground(new java.awt.Color(255, 109, 0));
        jpNorte.setPreferredSize(new java.awt.Dimension(1102, 38));
        jpNorte.setLayout(new java.awt.GridBagLayout());

        jpFechar.setBackground(new java.awt.Color(255, 0, 0));
        jpFechar.setPreferredSize(new java.awt.Dimension(38, 38));
        jpFechar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpFecharMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpFecharMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jpFecharMouseExited(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jpNorte.add(jpFechar, gridBagConstraints);

        getContentPane().add(jpNorte, java.awt.BorderLayout.NORTH);

        jpCentro.setBackground(new java.awt.Color(255, 209, 0));
        jpCentro.setLayout(new java.awt.GridBagLayout());

        jlPedido.setFont(new java.awt.Font("Georgia", 0, 20)); // NOI18N
        jlPedido.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPedido.setText("Pedidos");
        jlPedido.setAlignmentX(0.5F);
        jlPedido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 5, 0);
        jpCentro.add(jlPedido, gridBagConstraints);

        jspTabelaPedido.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jspTabelaPedido.setPreferredSize(new java.awt.Dimension(1280, 200));

        jtPedido.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jtPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número do Pedido", "Forma de Pagamento", "Valor Total", "Data/Hora", "Nome do Cliente", "Código do Cliente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtPedido.getTableHeader().setReorderingAllowed(false);
        jspTabelaPedido.setViewportView(jtPedido);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jpCentro.add(jspTabelaPedido, gridBagConstraints);

        jpPesquisa.setBackground(new java.awt.Color(255, 209, 0));
        jpPesquisa.setPreferredSize(new java.awt.Dimension(1280, 80));
        jpPesquisa.setLayout(new java.awt.GridBagLayout());

        jlDataInicial.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jlDataInicial.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlDataInicial.setText("Data Inicial:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jpPesquisa.add(jlDataInicial, gridBagConstraints);

        try {
            javax.swing.text.MaskFormatter data = new javax.swing.text.MaskFormatter("##/##/####");
            jtfDataInicial = new javax.swing.JFormattedTextField(data);
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        jtfDataInicial.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jtfDataInicial.setPreferredSize(new java.awt.Dimension(90, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jpPesquisa.add(jtfDataInicial, gridBagConstraints);

        jlDataFinal.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jlDataFinal.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlDataFinal.setText("Data Final:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jpPesquisa.add(jlDataFinal, gridBagConstraints);

        try {
            javax.swing.text.MaskFormatter data = new javax.swing.text.MaskFormatter("##/##/####");
            jtfDataFinal = new javax.swing.JFormattedTextField(data);
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        jtfDataFinal.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jtfDataFinal.setPreferredSize(new java.awt.Dimension(90, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jpPesquisa.add(jtfDataFinal, gridBagConstraints);

        jlCliente.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jlCliente.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlCliente.setText("Cód. Cliente:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jpPesquisa.add(jlCliente, gridBagConstraints);

        jtfCliente.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jtfCliente.setPreferredSize(new java.awt.Dimension(90, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jpPesquisa.add(jtfCliente, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jpCentro.add(jpPesquisa, gridBagConstraints);

        jlItensPedido.setFont(new java.awt.Font("Georgia", 0, 20)); // NOI18N
        jlItensPedido.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlItensPedido.setText("Itens do Pedido");
        jlItensPedido.setAlignmentX(0.5F);
        jlItensPedido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 5, 0);
        jpCentro.add(jlItensPedido, gridBagConstraints);

        jspTabelaItensPedido.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jspTabelaItensPedido.setPreferredSize(new java.awt.Dimension(1280, 120));

        jtItensPedido.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jtItensPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Referência", "Marca", "Quantidade", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtItensPedido.getTableHeader().setReorderingAllowed(false);
        jspTabelaItensPedido.setViewportView(jtItensPedido);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jpCentro.add(jspTabelaItensPedido, gridBagConstraints);

        getContentPane().add(jpCentro, java.awt.BorderLayout.CENTER);

        jpSul.setBackground(new java.awt.Color(255, 109, 0));
        jpSul.setMinimumSize(new java.awt.Dimension(1152, 70));
        jpSul.setPreferredSize(new java.awt.Dimension(1152, 70));

        jpBotaoVerificar.setBackground(new java.awt.Color(41, 98, 255));
        jpBotaoVerificar.setToolTipText("");
        jpBotaoVerificar.setMaximumSize(new java.awt.Dimension(60, 60));
        jpBotaoVerificar.setMinimumSize(new java.awt.Dimension(50, 50));
        jpBotaoVerificar.setPreferredSize(new java.awt.Dimension(60, 60));
        jpBotaoVerificar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpBotaoVerificarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpBotaoVerificarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jpBotaoVerificarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jpBotaoVerificarLayout = new javax.swing.GroupLayout(jpBotaoVerificar);
        jpBotaoVerificar.setLayout(jpBotaoVerificarLayout);
        jpBotaoVerificarLayout.setHorizontalGroup(
            jpBotaoVerificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        jpBotaoVerificarLayout.setVerticalGroup(
            jpBotaoVerificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        jpSul.add(jpBotaoVerificar);

        jpBotaoCancelar.setBackground(new java.awt.Color(41, 98, 255));
        jpBotaoCancelar.setMaximumSize(new java.awt.Dimension(60, 60));
        jpBotaoCancelar.setMinimumSize(new java.awt.Dimension(50, 50));
        jpBotaoCancelar.setPreferredSize(new java.awt.Dimension(60, 60));
        jpBotaoCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpBotaoCancelarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpBotaoCancelarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jpBotaoCancelarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jpBotaoCancelarLayout = new javax.swing.GroupLayout(jpBotaoCancelar);
        jpBotaoCancelar.setLayout(jpBotaoCancelarLayout);
        jpBotaoCancelarLayout.setHorizontalGroup(
            jpBotaoCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        jpBotaoCancelarLayout.setVerticalGroup(
            jpBotaoCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        jpSul.add(jpBotaoCancelar);

        getContentPane().add(jpSul, java.awt.BorderLayout.SOUTH);

        setBounds(0, 0, 1152, 720);
    }// </editor-fold>//GEN-END:initComponents

    private void jpFecharMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpFecharMouseClicked
        if(JOptionPane.showConfirmDialog(this, "Deseja realmente fechar?", "Pedidos", 0) == 0) {
            dispose();
        }
    }//GEN-LAST:event_jpFecharMouseClicked

    private void jpFecharMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpFecharMouseEntered
        jpFechar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(245, 124, 0), 2, false));
    }//GEN-LAST:event_jpFecharMouseEntered

    private void jpFecharMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpFecharMouseExited
        jpFechar.setBorder(new javax.swing.border.EmptyBorder(0, 0, 0, 0));
    }//GEN-LAST:event_jpFecharMouseExited

    private void jpBotaoVerificarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoVerificarMouseClicked
        filtros.clear();
        try {
            if (validarData()) {
                filtros.add(jtfDataInicial.getText());
                filtros.add(jtfDataFinal.getText());
            }

            if (!jtfCliente.getText().isEmpty()) {
                filtros.add(jtfCliente.getText());
            }
            if (!filtros.isEmpty()) {
                preencherTabela(jtPedido, pedidoDAO.preencherResultSet(filtros));
                configurarLarguraTabelaPedido();
                configurarLarguraTabelaItensPedido();
            } else {
                throw new Exception("nenhum filtro inserido.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage(), "Pedidos - Botão Verificar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jpBotaoVerificarMouseClicked

    private void jpBotaoVerificarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoVerificarMouseEntered
        paineis.componentSetLineBorderColor(jpBotaoVerificar);
    }//GEN-LAST:event_jpBotaoVerificarMouseEntered

    private void jpBotaoVerificarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoVerificarMouseExited
        paineis.componentSetEmptyBorder(jpBotaoVerificar);
    }//GEN-LAST:event_jpBotaoVerificarMouseExited

    private void jpBotaoCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoCancelarMouseClicked
        campos.componentsClearText(jpPesquisa);
        try {
            preencherTabela(jtPedido, pedidoDAO.preencherResultSet());
            configurarLarguraTabelaPedido();
            configurarLarguraTabelaItensPedido();
        } catch (Exception e) {
            System.out.println("Erro ao preencher tabela: " + e.getMessage());
        }
    }//GEN-LAST:event_jpBotaoCancelarMouseClicked

    private void jpBotaoCancelarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoCancelarMouseEntered
        paineis.componentSetLineBorderColor(jpBotaoCancelar);
    }//GEN-LAST:event_jpBotaoCancelarMouseEntered

    private void jpBotaoCancelarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoCancelarMouseExited
        paineis.componentSetEmptyBorder(jpBotaoCancelar);
    }//GEN-LAST:event_jpBotaoCancelarMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jlCliente;
    private javax.swing.JLabel jlDataFinal;
    private javax.swing.JLabel jlDataInicial;
    private javax.swing.JLabel jlItensPedido;
    private javax.swing.JLabel jlPedido;
    private javax.swing.JPanel jpBotaoCancelar;
    private javax.swing.JPanel jpBotaoVerificar;
    private javax.swing.JPanel jpCentro;
    private javax.swing.JPanel jpFechar;
    private javax.swing.JPanel jpNorte;
    private javax.swing.JPanel jpPesquisa;
    private javax.swing.JPanel jpSul;
    private javax.swing.JScrollPane jspTabelaItensPedido;
    private javax.swing.JScrollPane jspTabelaPedido;
    private javax.swing.JTable jtItensPedido;
    private javax.swing.JTable jtPedido;
    private javax.swing.JTextField jtfCliente;
    private javax.swing.JTextField jtfDataFinal;
    private javax.swing.JTextField jtfDataInicial;
    // End of variables declaration//GEN-END:variables

    public void configurarLarguraTabelaPedido() {
        //Define a largura ideal das colunas na tabela de pedidos.
        jtPedido.getColumnModel().getColumn(0).setPreferredWidth(150);
        jtPedido.getColumnModel().getColumn(1).setPreferredWidth(200);
        jtPedido.getColumnModel().getColumn(2).setPreferredWidth(150);
        jtPedido.getColumnModel().getColumn(3).setPreferredWidth(250);
        jtPedido.getColumnModel().getColumn(4).setPreferredWidth(380);
        jtPedido.getColumnModel().getColumn(5).setPreferredWidth(150);
    }
    
    public void configurarLarguraTabelaItensPedido() {
        //Define a largura ideal das colunas na tabela de itens do pedido.
        jtItensPedido.getColumnModel().getColumn(0).setPreferredWidth(150);
        jtItensPedido.getColumnModel().getColumn(1).setPreferredWidth(380);
        jtItensPedido.getColumnModel().getColumn(2).setPreferredWidth(175);
        jtItensPedido.getColumnModel().getColumn(3).setPreferredWidth(175);
        jtItensPedido.getColumnModel().getColumn(4).setPreferredWidth(150);
        jtItensPedido.getColumnModel().getColumn(5).setPreferredWidth(150);
    }
    
    public boolean validarData() throws Exception {
        if (jtfDataInicial.getText().contains("  ")) {
            return false;
        }
        if (jtfDataFinal.getText().contains("  ")) {
            return false;
        }
        
        int diaInicial = Integer.parseInt(jtfDataInicial.getText().substring(0, 2));
        int mesInicial = Integer.parseInt(jtfDataInicial.getText().substring(3, 5));
        int anoInicial = Integer.parseInt(jtfDataInicial.getText().substring(6));
        int diaFinal = Integer.parseInt(jtfDataFinal.getText().substring(0, 2));
        int mesFinal = Integer.parseInt(jtfDataFinal.getText().substring(3, 5));
        int anoFinal = Integer.parseInt(jtfDataFinal.getText().substring(6));
        
        if (diaInicial > 0 && diaInicial <= 31) {
            if (mesInicial > 0 && mesInicial <= 12) {
                if (anoInicial > 0) {
                    if (diaFinal > 0 && diaFinal <= 31) {
                        if (mesFinal > 0 && mesFinal <= 12) {
                            if (anoFinal > 0) {
                                return validarData(diaInicial, mesInicial, anoInicial, diaFinal, mesFinal, anoFinal);
                            } else {
                                jtfDataFinal.requestFocus();
                                throw new Exception("ano da data final, inválido.");
                            }
                        } else {
                            jtfDataFinal.requestFocus();
                            throw new Exception("mês da data final, inválido.");
                        }
                    } else {
                        jtfDataFinal.requestFocus();
                        throw new Exception("dia da data final, inválido.");
                    }
                } else {
                    jtfDataInicial.requestFocus();
                    throw new Exception("ano da data inicial, inválido.");
                }
            } else {
                jtfDataInicial.requestFocus();
                throw new Exception("mês da data inicial, inválido.");
            }
        } else {
            jtfDataInicial.requestFocus();
            throw new Exception("dia da data inicial, inválido.");
        }
    }
    
    public boolean validarData(int diaInicial, int mesInicial, int anoInicial, int diaFinal, int mesFinal, int anoFinal) throws Exception {
        if (anoFinal == anoInicial) {
            if (mesFinal == mesInicial) {
                if (diaFinal >= diaInicial) {
                    return true;
                } else {
                    jtfDataFinal.requestFocus();
                    throw new Exception("o dia final não pode ser menor que o dia inicial dentro do mesmo mês e mesmo ano.");
                }
            } else {
                if (mesFinal > mesInicial) {
                    return true;
                } else {
                    jtfDataFinal.requestFocus();
                    throw new Exception("o mês final não pode ser menor que o mês inicial dentro do mesmo ano.");
                }
            }
        } else {
            if (anoFinal > anoInicial) {
                return true;
            } else {
                jtfDataFinal.requestFocus();
                throw new Exception("o ano final não pode ser menor que o ano inicial.");
            }
        }
    }
    
    public void preencherTabela(JTable jt, ResultSet rs) throws Exception {        
        DefaultTableModel tableModel = new DefaultTableModel();
        ResultSetMetaData metaData = rs.getMetaData();

        int columnCount = metaData.getColumnCount();

        //Get all column names from meta data and add columns to table model
        for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
            tableModel.addColumn(metaData.getColumnLabel(columnIndex));
        }

        //Create array of Objects with size of column count from meta data
        Object[] row = new Object[columnCount];

        //Scroll through result set
        while (rs.next()) {
            //Get object from column with specific index of result set to array of objects
            for (int i = 0; i < columnCount; i++) {
                row[i] = rs.getObject(i + 1);
            }
            //Now add row to table model with that array of objects as an argument
            tableModel.addRow(row);
        }
        
        //Now add that table model to your table and you are done :D
        jt.setModel(tableModel);
    }
}