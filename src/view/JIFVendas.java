package view;

import data.*;
import model.*;
import utils.*;
import java.awt.Graphics;
import java.awt.Image;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.*;
import javax.swing.table.*;
import javax.swing.text.PlainDocument;

public class JIFVendas extends javax.swing.JInternalFrame {

    Campos campos;
    Paineis paineis;
    Cliente cliente;
    ClienteDAO clienteDAO;
    Produto produto;
    ProdutoDAO produtoDAO;
    ArrayList<String> filtros;
    Pedido pedido;
    PedidoDAO pedidoDAO;
    ItemPedido itemPedido;
    ListSelectionModel listSelectionModel;
    
    public JIFVendas() {
        initComponents();
        
        //Filtro que impossibilita o campo jtfCodigoCliente de receber caracteres que não sejam números.
        PlainDocument docCodigoCliente = (PlainDocument) jtfCodigoCliente.getDocument();
        docCodigoCliente.setDocumentFilter(new FiltroDigitos());
        
        try {
            campos = new Campos();
            paineis = new Paineis();
            cliente = new Cliente();
            clienteDAO = new ClienteDAO();
            produto = new Produto();
            produtoDAO = new ProdutoDAO();
            filtros = new ArrayList<>();
            pedido = new Pedido();
            pedidoDAO = new PedidoDAO();
            itemPedido = new ItemPedido();
        } catch (Exception e) {
            System.out.println("Erro ao inicializar instância de " + e.getMessage());
        }
        
        try {
            preencherTabela(produtoDAO.preencherResultSet());
        } catch (Exception e) {
            System.out.println("Erro ao preencher tabela: " + e.getMessage());
        }
        
        //Inicializando os botões do Sul invisíveis.
        jpBotaoCancelar.setVisible(false);
        jpBotaoSalvar.setVisible(false);
        
        //Define a largura ideal das colunas na tabela de telefones.
        jtTelefones.getColumnModel().getColumn(0).setPreferredWidth(77);
        jtTelefones.getColumnModel().getColumn(1).setPreferredWidth(223);
        jtTelefones.getTableHeader().setUI(null);
                
        //Permite seleção única de linhas.
        listSelectionModel = jtEstoque.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandler());
	jtEstoque.setSelectionModel(listSelectionModel);
        listSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        listSelectionModel = jtPedido.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandler());
        jtPedido.setSelectionModel(listSelectionModel);
        listSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
    }

    class SharedListSelectionHandler implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            ListSelectionModel lsm = (ListSelectionModel) e.getSource();

            if (jtEstoque.isFocusOwner()) {
                if (lsm.isSelectionEmpty()) {
                    jtpDescricao.setText("Nenhum produto selecionado.");
                } else {
                    int i = jtEstoque.getSelectedRow();
                    TableModel tableModel = jtEstoque.getModel();
                    jtpDescricao.setText("Descrição: " + tableModel.getValueAt(i, 8).toString());
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jpNorte = new javax.swing.JPanel();
        ImageIcon iconBotaoFechar = new ImageIcon(getClass().getResource("/images/Comum/BotaoFechar.png"));
        Image botaoFechar = iconBotaoFechar.getImage();
        jpFechar = new javax.swing.JPanel() {
            public void paintComponent(Graphics g) {
                g.drawImage(botaoFechar, 0, 0, getWidth(), getHeight(), this);
            }
        };
        jpCliente = new javax.swing.JPanel();
        jlCodigoCliente = new javax.swing.JLabel();
        jtfCodigoCliente = new javax.swing.JTextField();
        jlNome = new javax.swing.JLabel();
        jtfNome = new javax.swing.JTextField();
        jlTelefone = new javax.swing.JLabel();
        jspTelefones = new javax.swing.JScrollPane();
        jtTelefones = new javax.swing.JTable();
        jlFormaPagamento = new javax.swing.JLabel();
        jcbFormaPagamento = new javax.swing.JComboBox<>();
        jpCentro = new javax.swing.JPanel();
        jlEstoque = new javax.swing.JLabel();
        jspTabelaEstoque = new javax.swing.JScrollPane();
        jtEstoque = new javax.swing.JTable();
        jpDescricao = new javax.swing.JPanel();
        jspDescricao = new javax.swing.JScrollPane();
        jtpDescricao = new javax.swing.JTextPane();
        jpPesquisa = new javax.swing.JPanel();
        jcbFiltroPrincipal = new javax.swing.JComboBox<>();
        jcbOrdenarPrincipal = new javax.swing.JComboBox<>();
        jtfFiltroPrincipal = new javax.swing.JTextField();
        jrbFiltroAdicional = new javax.swing.JRadioButton();
        jcbFiltroAdicional = new javax.swing.JComboBox<>();
        jcbOrdenarAdicional = new javax.swing.JComboBox<>();
        jtfFiltroAdicional = new javax.swing.JTextField();
        jbPesquisar = new javax.swing.JButton();
        jpAcao = new javax.swing.JPanel();
        jbAdicionar = new javax.swing.JButton();
        jbRemover = new javax.swing.JButton();
        jlPedido = new javax.swing.JLabel();
        jspTabelaPedido = new javax.swing.JScrollPane();
        jtPedido = new javax.swing.JTable();
        jpSul = new javax.swing.JPanel();
        ImageIcon iconBotaoCancelar = new ImageIcon(getClass().getResource("/images/Comum/BotaoCancelar.png"));
        Image botaoCancelar = iconBotaoCancelar.getImage();
        jpBotaoCancelar = new javax.swing.JPanel() {
            public void paintComponent(Graphics g) {
                g.drawImage(botaoCancelar, 0, 0, getWidth(), getHeight(), this);
            }
        };
        ImageIcon iconBotaoSalvar = new ImageIcon(getClass().getResource("/images/Comum/BotaoSalvar.png"));
        Image botaoSalvar = iconBotaoSalvar.getImage();
        jpBotaoSalvar = new javax.swing.JPanel() {
            public void paintComponent(Graphics g) {
                g.drawImage(botaoSalvar, 0, 0, getWidth(), getHeight(), this);
            }
        };

        setBorder(null);
        setFrameIcon(null);
        setPreferredSize(new java.awt.Dimension(1280, 720));

        jpNorte.setBackground(new java.awt.Color(255, 109, 0));
        jpNorte.setPreferredSize(new java.awt.Dimension(1280, 38));
        jpNorte.setLayout(new java.awt.GridBagLayout());

        jpFechar.setBackground(new java.awt.Color(255, 0, 0));
        jpFechar.setMinimumSize(new java.awt.Dimension(38, 38));
        jpFechar.setPreferredSize(new java.awt.Dimension(38, 38));
        jpFechar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpFecharMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpFecharMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jpFecharMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jpFecharLayout = new javax.swing.GroupLayout(jpFechar);
        jpFechar.setLayout(jpFecharLayout);
        jpFecharLayout.setHorizontalGroup(
            jpFecharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpFecharLayout.setVerticalGroup(
            jpFecharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jpNorte.add(jpFechar, gridBagConstraints);

        jpCliente.setBackground(new java.awt.Color(255, 109, 0));
        jpCliente.setPreferredSize(new java.awt.Dimension(1242, 38));
        jpCliente.setLayout(new java.awt.GridBagLayout());

        jlCodigoCliente.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlCodigoCliente.setText("Cliente:");
        jlCodigoCliente.setPreferredSize(new java.awt.Dimension(45, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jpCliente.add(jlCodigoCliente, gridBagConstraints);

        jtfCodigoCliente.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtfCodigoCliente.setPreferredSize(new java.awt.Dimension(75, 20));
        jtfCodigoCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfCodigoClienteFocusLost(evt);
            }
        });
        jtfCodigoCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfCodigoClienteKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jpCliente.add(jtfCodigoCliente, gridBagConstraints);

        jlNome.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlNome.setText("Nome:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 0, 0);
        jpCliente.add(jlNome, gridBagConstraints);

        jtfNome.setEditable(false);
        jtfNome.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtfNome.setPreferredSize(new java.awt.Dimension(250, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jpCliente.add(jtfNome, gridBagConstraints);

        jlTelefone.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlTelefone.setText("Telefones:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 0, 0);
        jpCliente.add(jlTelefone, gridBagConstraints);

        jspTelefones.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jspTelefones.setPreferredSize(new java.awt.Dimension(300, 20));

        jtTelefones.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtTelefones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Telefone"
            }
        ));
        jtTelefones.setEnabled(false);
        jtTelefones.setRowHeight(20);
        jspTelefones.setViewportView(jtTelefones);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jpCliente.add(jspTelefones, gridBagConstraints);

        jlFormaPagamento.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlFormaPagamento.setText("Forma de Pagamento:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 0, 0);
        jpCliente.add(jlFormaPagamento, gridBagConstraints);

        jcbFormaPagamento.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jcbFormaPagamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dinheiro", "Cartão de crédito", "Cartão de débito", "Boleto bancário" }));
        jcbFormaPagamento.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jpCliente.add(jcbFormaPagamento, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jpNorte.add(jpCliente, gridBagConstraints);

        getContentPane().add(jpNorte, java.awt.BorderLayout.NORTH);

        jpCentro.setBackground(new java.awt.Color(255, 209, 0));
        jpCentro.setLayout(new java.awt.GridBagLayout());

        jlEstoque.setFont(new java.awt.Font("Georgia", 0, 20)); // NOI18N
        jlEstoque.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlEstoque.setText("Estoque");
        jlEstoque.setAlignmentX(0.5F);
        jlEstoque.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 5, 0);
        jpCentro.add(jlEstoque, gridBagConstraints);

        jspTabelaEstoque.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jspTabelaEstoque.setPreferredSize(new java.awt.Dimension(1280, 200));

        jtEstoque.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jtEstoque.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pesquisa", "Nome", "Referência", "Marca", "Quantidade", "Preço", "Múltiplo", "Código"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtEstoque.getTableHeader().setReorderingAllowed(false);
        jspTabelaEstoque.setViewportView(jtEstoque);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jpCentro.add(jspTabelaEstoque, gridBagConstraints);

        jpDescricao.setBackground(new java.awt.Color(255, 209, 0));
        jpDescricao.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jpDescricao.setPreferredSize(new java.awt.Dimension(1280, 30));

        jspDescricao.setPreferredSize(new java.awt.Dimension(1000, 30));

        jtpDescricao.setEditable(false);
        jtpDescricao.setBackground(new java.awt.Color(255, 209, 0));
        jtpDescricao.setBorder(null);
        jtpDescricao.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtpDescricao.setFocusable(false);
        jspDescricao.setViewportView(jtpDescricao);

        javax.swing.GroupLayout jpDescricaoLayout = new javax.swing.GroupLayout(jpDescricao);
        jpDescricao.setLayout(jpDescricaoLayout);
        jpDescricaoLayout.setHorizontalGroup(
            jpDescricaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
            .addGroup(jpDescricaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jpDescricaoLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jspDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jpDescricaoLayout.setVerticalGroup(
            jpDescricaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
            .addGroup(jpDescricaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jpDescricaoLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jspDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jpCentro.add(jpDescricao, gridBagConstraints);

        jpPesquisa.setBackground(new java.awt.Color(255, 209, 0));
        jpPesquisa.setPreferredSize(new java.awt.Dimension(1280, 20));
        jpPesquisa.setLayout(new java.awt.GridBagLayout());

        jcbFiltroPrincipal.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jcbFiltroPrincipal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pesquisa", "Nome", "Referência", "Marca", "Código" }));
        jcbFiltroPrincipal.setPreferredSize(new java.awt.Dimension(80, 20));
        jcbFiltroPrincipal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFiltroPrincipalItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jpPesquisa.add(jcbFiltroPrincipal, gridBagConstraints);

        jcbOrdenarPrincipal.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jcbOrdenarPrincipal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Inicia", "Termina", "Contém", "Igual" }));
        jcbOrdenarPrincipal.setPreferredSize(new java.awt.Dimension(80, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jpPesquisa.add(jcbOrdenarPrincipal, gridBagConstraints);

        jtfFiltroPrincipal.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jtfFiltroPrincipal.setPreferredSize(new java.awt.Dimension(175, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jpPesquisa.add(jtfFiltroPrincipal, gridBagConstraints);

        jrbFiltroAdicional.setBackground(new java.awt.Color(255, 209, 0));
        jrbFiltroAdicional.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jrbFiltroAdicional.setText("Filtro adicional");
        jrbFiltroAdicional.setMaximumSize(new java.awt.Dimension(100, 20));
        jrbFiltroAdicional.setMinimumSize(new java.awt.Dimension(93, 20));
        jrbFiltroAdicional.setPreferredSize(new java.awt.Dimension(120, 20));
        jrbFiltroAdicional.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbFiltroAdicionalItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jpPesquisa.add(jrbFiltroAdicional, gridBagConstraints);

        jcbFiltroAdicional.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jcbFiltroAdicional.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pesquisa", "Nome", "Referência", "Marca" }));
        jcbFiltroAdicional.setEnabled(false);
        jcbFiltroAdicional.setPreferredSize(new java.awt.Dimension(80, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jpPesquisa.add(jcbFiltroAdicional, gridBagConstraints);

        jcbOrdenarAdicional.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jcbOrdenarAdicional.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Inicia", "Termina", "Contém", "Igual" }));
        jcbOrdenarAdicional.setEnabled(false);
        jcbOrdenarAdicional.setPreferredSize(new java.awt.Dimension(80, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jpPesquisa.add(jcbOrdenarAdicional, gridBagConstraints);

        jtfFiltroAdicional.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jtfFiltroAdicional.setEnabled(false);
        jtfFiltroAdicional.setPreferredSize(new java.awt.Dimension(175, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jpPesquisa.add(jtfFiltroAdicional, gridBagConstraints);

        jbPesquisar.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jbPesquisar.setText("Pesquisar");
        jbPesquisar.setPreferredSize(new java.awt.Dimension(100, 20));
        jbPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPesquisarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 35, 0, 0);
        jpPesquisa.add(jbPesquisar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jpCentro.add(jpPesquisa, gridBagConstraints);

        jpAcao.setBackground(new java.awt.Color(255, 209, 0));
        jpAcao.setPreferredSize(new java.awt.Dimension(1280, 30));

        jbAdicionar.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jbAdicionar.setText("+");
        jbAdicionar.setPreferredSize(new java.awt.Dimension(40, 20));
        jbAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdicionarActionPerformed(evt);
            }
        });
        jpAcao.add(jbAdicionar);

        jbRemover.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jbRemover.setText("-");
        jbRemover.setPreferredSize(new java.awt.Dimension(40, 20));
        jbRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoverActionPerformed(evt);
            }
        });
        jpAcao.add(jbRemover);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jpCentro.add(jpAcao, gridBagConstraints);

        jlPedido.setFont(new java.awt.Font("Georgia", 0, 20)); // NOI18N
        jlPedido.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPedido.setText("Pedido de Venda");
        jlPedido.setAlignmentX(0.5F);
        jlPedido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 5, 0);
        jpCentro.add(jlPedido, gridBagConstraints);

        jspTabelaPedido.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jspTabelaPedido.setPreferredSize(new java.awt.Dimension(1280, 120));

        jtPedido.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N
        jtPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pesquisa", "Nome", "Referência", "Marca", "Quantidade", "Preço", "Múltiplo", "Código"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtPedido.getTableHeader().setReorderingAllowed(false);
        jspTabelaPedido.setViewportView(jtPedido);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jpCentro.add(jspTabelaPedido, gridBagConstraints);

        getContentPane().add(jpCentro, java.awt.BorderLayout.CENTER);

        jpSul.setBackground(new java.awt.Color(255, 109, 0));
        jpSul.setPreferredSize(new java.awt.Dimension(1280, 70));

        jpBotaoCancelar.setBackground(new java.awt.Color(41, 98, 255));
        jpBotaoCancelar.setMaximumSize(new java.awt.Dimension(60, 60));
        jpBotaoCancelar.setMinimumSize(new java.awt.Dimension(50, 50));
        jpBotaoCancelar.setPreferredSize(new java.awt.Dimension(60, 60));
        jpBotaoCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpBotaoCancelarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpBotaoCancelarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jpBotaoCancelarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jpBotaoCancelarLayout = new javax.swing.GroupLayout(jpBotaoCancelar);
        jpBotaoCancelar.setLayout(jpBotaoCancelarLayout);
        jpBotaoCancelarLayout.setHorizontalGroup(
            jpBotaoCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        jpBotaoCancelarLayout.setVerticalGroup(
            jpBotaoCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        jpBotaoSalvar.setBackground(new java.awt.Color(41, 98, 255));
        jpBotaoSalvar.setToolTipText("");
        jpBotaoSalvar.setMaximumSize(new java.awt.Dimension(60, 60));
        jpBotaoSalvar.setMinimumSize(new java.awt.Dimension(50, 50));
        jpBotaoSalvar.setPreferredSize(new java.awt.Dimension(60, 60));
        jpBotaoSalvar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpBotaoSalvarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpBotaoSalvarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jpBotaoSalvarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jpBotaoSalvarLayout = new javax.swing.GroupLayout(jpBotaoSalvar);
        jpBotaoSalvar.setLayout(jpBotaoSalvarLayout);
        jpBotaoSalvarLayout.setHorizontalGroup(
            jpBotaoSalvarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        jpBotaoSalvarLayout.setVerticalGroup(
            jpBotaoSalvarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jpSulLayout = new javax.swing.GroupLayout(jpSul);
        jpSul.setLayout(jpSulLayout);
        jpSulLayout.setHorizontalGroup(
            jpSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
            .addGroup(jpSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jpSulLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jpBotaoCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(5, 5, 5)
                    .addComponent(jpBotaoSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jpSulLayout.setVerticalGroup(
            jpSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
            .addGroup(jpSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jpSulLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(jpSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jpBotaoCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jpBotaoSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        getContentPane().add(jpSul, java.awt.BorderLayout.SOUTH);

        setBounds(0, 0, 1280, 720);
    }// </editor-fold>//GEN-END:initComponents

    private void jpFecharMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpFecharMouseClicked
        if (JOptionPane.showConfirmDialog(this, "Deseja realmente fechar?", "Vendas", 0) == 0) {
            dispose();
        }
    }//GEN-LAST:event_jpFecharMouseClicked

    private void jpFecharMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpFecharMouseEntered
        jpFechar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(245, 124, 0), 2, false));
    }//GEN-LAST:event_jpFecharMouseEntered

    private void jpFecharMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpFecharMouseExited
        jpFechar.setBorder(new javax.swing.border.EmptyBorder(0, 0, 0, 0));
    }//GEN-LAST:event_jpFecharMouseExited

    private void jrbFiltroAdicionalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbFiltroAdicionalItemStateChanged
        if(evt.getStateChange() == 1) {
            jcbFiltroAdicional.setEnabled(true);
            jcbOrdenarAdicional.setEnabled(true);
            jtfFiltroAdicional.setEnabled(true);
        } else {
            jcbFiltroAdicional.setEnabled(false);
            jcbOrdenarAdicional.setEnabled(false);
            jtfFiltroAdicional.setEnabled(false);
            jtfFiltroAdicional.setText("");
        }
    }//GEN-LAST:event_jrbFiltroAdicionalItemStateChanged

    private void jtfCodigoClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfCodigoClienteFocusLost
        if(evt.isTemporary() == false) {
            try {
                if("".equals(jtfCodigoCliente.getText())) {
                    throw new Exception ("insira um código de cliente");
                }
                
                cliente = clienteDAO.pesquisarCliente(Integer.parseInt(jtfCodigoCliente.getText()));
                jtfNome.setText(cliente.getNome());
                
                //Limpando possíveis telefones velhos e adicionando os do código do cliente atual.
                DefaultTableModel mp = (DefaultTableModel) jtTelefones.getModel();
                mp.setRowCount(0);
                for (TelefoneCliente telefone : cliente.getTelefones()) {
                    mp.addRow(new Object[]{telefone.getTipo(), telefone.getTelefone()});
                }
                jcbFormaPagamento.setEnabled(true);

            } catch (Exception e) {
                jcbFormaPagamento.setEnabled(false);
                jtfCodigoCliente.requestFocus();
                jtfCodigoCliente.selectAll();
                JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage(), "Vendas - Pesquisa de Cliente", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jtfCodigoClienteFocusLost

    private void jtfCodigoClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfCodigoClienteKeyPressed
        if(evt.getKeyCode() == 10) {
            try {
                if("".equals(jtfCodigoCliente.getText())) {
                    throw new Exception ("insira um código de cliente");
                }
                cliente = clienteDAO.pesquisarCliente(Integer.parseInt(jtfCodigoCliente.getText()));
                jtfNome.setText(cliente.getNome());
                
                //Limpando possíveis telefones velhos e adicionando os do código do cliente atual.
                DefaultTableModel mp = (DefaultTableModel) jtTelefones.getModel();
                mp.setRowCount(0);
                for (TelefoneCliente telefone : cliente.getTelefones()) {
                    mp.addRow(new Object[]{telefone.getTipo(), telefone.getTelefone()});
                }
                jcbFormaPagamento.setEnabled(true);

            } catch (Exception e) {
                jcbFormaPagamento.setEnabled(false);
                jtfCodigoCliente.requestFocus();
                jtfCodigoCliente.selectAll();
                JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage(), "Vendas - Pesquisa de Cliente", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jtfCodigoClienteKeyPressed

    private void jbPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPesquisarActionPerformed
        //Coleta as informações dos filtros, valida e pesquisa para retornar na tabela Estoque.
        filtros.clear();
        
        if ("referência".equalsIgnoreCase(jcbFiltroPrincipal.getSelectedItem().toString())) {
            filtros.add("referencia");
        } else {
            if ("código".equalsIgnoreCase(jcbFiltroPrincipal.getSelectedItem().toString())) {
                filtros.add("codigoProduto");
            } else {
                filtros.add(jcbFiltroPrincipal.getSelectedItem().toString().toLowerCase());
            }
        }
        filtros.add(jcbOrdenarPrincipal.getSelectedItem().toString());
        filtros.add(jtfFiltroPrincipal.getText());

        if (jrbFiltroAdicional.isSelected()) {
            if ("referência".equalsIgnoreCase(jcbFiltroAdicional.getSelectedItem().toString())) {
                filtros.add("referencia");
            } else {
                filtros.add(jcbFiltroAdicional.getSelectedItem().toString().toLowerCase());
            }
            filtros.add(jcbOrdenarAdicional.getSelectedItem().toString());
            filtros.add(jtfFiltroAdicional.getText());
        }
        
        try {
            preencherTabela(produtoDAO.preencherResultSet(filtros));
        } catch (Exception e) {
            System.out.println("Erro ao preencher tabela: " + e.getMessage());
        }
    }//GEN-LAST:event_jbPesquisarActionPerformed

    private void jbAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdicionarActionPerformed
        //Adiciona o item selecionado da tabela Estoque para a tabela Pedido
        try {
            DefaultTableModel pedido = (DefaultTableModel) jtPedido.getModel();
            DefaultTableModel estoque = (DefaultTableModel) jtEstoque.getModel();
            int i = jtEstoque.getSelectedRow();
            
            int quantidade = Integer.parseInt(JOptionPane.showInputDialog(this, "Insira a quantidade desejada", "Quantidade", JOptionPane.QUESTION_MESSAGE));
            while(validarQuantidade(quantidade, Integer.parseInt(estoque.getValueAt(i, 4).toString()), Integer.parseInt(estoque.getValueAt(i, 6).toString())) != true) {
                quantidade = Integer.parseInt(JOptionPane.showInputDialog(this, "Insira uma quantidade válida", "Quantidade", JOptionPane.QUESTION_MESSAGE));
            }
            
            float preco = Float.parseFloat(JOptionPane.showInputDialog(this, "Insira o preço desejado", "Preço", JOptionPane.QUESTION_MESSAGE));
            while(validarPreco(preco, Float.parseFloat(estoque.getValueAt(i, 5).toString())) != true) {
                preco = Float.parseFloat(JOptionPane.showInputDialog(this, "Insira um preço válido", "Preço", JOptionPane.QUESTION_MESSAGE));
            }
            
            pedido.addRow(new Object[]{estoque.getValueAt(i, 0).toString(), estoque.getValueAt(i, 1).toString(), estoque.getValueAt(i, 2).toString(), estoque.getValueAt(i, 3).toString(), quantidade, preco, estoque.getValueAt(i, 6).toString(), estoque.getValueAt(i, 7).toString()});
            
            if(jpBotaoCancelar.isVisible() == false || jpBotaoSalvar.isVisible() == false) {
                jpBotaoCancelar.setVisible(true);
                jpBotaoSalvar.setVisible(true);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage(), "Vendas - Botão Adicionar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbAdicionarActionPerformed

    private void jbRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoverActionPerformed
        //Remove o item selecionado da tabela Pedido
        try {
            DefaultTableModel mp = (DefaultTableModel) jtPedido.getModel();
            mp.removeRow(jtPedido.getSelectedRow());
            jtPedido.setModel(mp);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: selecione um item para ser removido", "Vendas - Botão Remover", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbRemoverActionPerformed

    private void jcbFiltroPrincipalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFiltroPrincipalItemStateChanged
        if("Código".equals(evt.getItem().toString())) {
            jcbOrdenarPrincipal.setSelectedIndex(3);
            jcbOrdenarPrincipal.setEnabled(false);
            if(jrbFiltroAdicional.isSelected()) {
               jrbFiltroAdicional.doClick();
            }
            jrbFiltroAdicional.setEnabled(false);
        } else {
            jcbOrdenarPrincipal.setSelectedIndex(0);
            jcbOrdenarPrincipal.setEnabled(true);
            jrbFiltroAdicional.setEnabled(true);
        }
    }//GEN-LAST:event_jcbFiltroPrincipalItemStateChanged

    private void jpBotaoCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoCancelarMouseClicked
        //Como se estivesse abrindo a tela de novo.
        jtfNome.setText("");
        jcbFormaPagamento.setSelectedIndex(0);
        jtpDescricao.setText("");
        
        jcbFiltroPrincipal.setSelectedIndex(0);
        jcbOrdenarPrincipal.setSelectedIndex(0);
        jtfFiltroPrincipal.setText("");
        
        jrbFiltroAdicional.setSelected(false);
        jcbFiltroAdicional.setSelectedIndex(0);
        jcbOrdenarAdicional.setSelectedIndex(0);
        jcbFiltroAdicional.setEnabled(false);
        jcbOrdenarAdicional.setEnabled(false);
        jtfFiltroAdicional.setEnabled(false);
        jtfFiltroAdicional.setText("");
        
        jtfCodigoCliente.setText("");
        jtfCodigoCliente.requestFocus();
        
        jpBotaoCancelar.setVisible(false);
        jpBotaoSalvar.setVisible(false);

        //Limpando possíveis telefones que estejam dentro da JTable "jtTelefones"
        DefaultTableModel telefone = (DefaultTableModel) jtTelefones.getModel();
        telefone.setRowCount(0);
        
        //Reiniciando os produtos mostrados na JTable "jtEstoque"
        DefaultTableModel estoque = (DefaultTableModel) jtEstoque.getModel();
        estoque.setRowCount(0);
        try {
            preencherTabela(produtoDAO.preencherResultSet());
        } catch (Exception e) {
            System.out.println("Erro ao preencher tabela sem filtros: " + e.getMessage());
        }
        
        //Limpando possíveis itens de pedido que estejam dentro da JTable "jtPedido"
        DefaultTableModel pedido = (DefaultTableModel) jtPedido.getModel();
        pedido.setRowCount(0);
    }//GEN-LAST:event_jpBotaoCancelarMouseClicked

    private void jpBotaoCancelarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoCancelarMouseEntered
        paineis.componentSetLineBorderColor(jpBotaoCancelar);
    }//GEN-LAST:event_jpBotaoCancelarMouseEntered

    private void jpBotaoCancelarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoCancelarMouseExited
        paineis.componentSetEmptyBorder(jpBotaoCancelar);
    }//GEN-LAST:event_jpBotaoCancelarMouseExited

    private void jpBotaoSalvarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoSalvarMouseClicked
        try {
            if (preencherObjeto(pedido)) {
                if (pedidoDAO.efetuarPedido(pedido)) {
                    //Atualiza a contagem do estoque, conforme o pedido atual está, no caso, "retirando" do estoque.
                    if (produtoDAO.atualizarEstoque(pedido.getItensPedido())) {
                        JOptionPane.showMessageDialog(this, "Pedido efetuado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                        jpBotaoCancelarMouseClicked(evt);
                    }
                } else {
                    throw new Exception("ao efetuar pedido");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage(), "Vendas - Botão Salvar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jpBotaoSalvarMouseClicked

    private void jpBotaoSalvarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoSalvarMouseEntered
        paineis.componentSetLineBorderColor(jpBotaoSalvar);
    }//GEN-LAST:event_jpBotaoSalvarMouseEntered

    private void jpBotaoSalvarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoSalvarMouseExited
        paineis.componentSetEmptyBorder(jpBotaoSalvar);
    }//GEN-LAST:event_jpBotaoSalvarMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbAdicionar;
    private javax.swing.JButton jbPesquisar;
    private javax.swing.JButton jbRemover;
    private javax.swing.JComboBox<String> jcbFiltroAdicional;
    private javax.swing.JComboBox<String> jcbFiltroPrincipal;
    private javax.swing.JComboBox<String> jcbFormaPagamento;
    private javax.swing.JComboBox<String> jcbOrdenarAdicional;
    private javax.swing.JComboBox<String> jcbOrdenarPrincipal;
    private javax.swing.JLabel jlCodigoCliente;
    private javax.swing.JLabel jlEstoque;
    private javax.swing.JLabel jlFormaPagamento;
    private javax.swing.JLabel jlNome;
    private javax.swing.JLabel jlPedido;
    private javax.swing.JLabel jlTelefone;
    private javax.swing.JPanel jpAcao;
    private javax.swing.JPanel jpBotaoCancelar;
    private javax.swing.JPanel jpBotaoSalvar;
    private javax.swing.JPanel jpCentro;
    private javax.swing.JPanel jpCliente;
    private javax.swing.JPanel jpDescricao;
    private javax.swing.JPanel jpFechar;
    private javax.swing.JPanel jpNorte;
    private javax.swing.JPanel jpPesquisa;
    private javax.swing.JPanel jpSul;
    private javax.swing.JRadioButton jrbFiltroAdicional;
    private javax.swing.JScrollPane jspDescricao;
    private javax.swing.JScrollPane jspTabelaEstoque;
    private javax.swing.JScrollPane jspTabelaPedido;
    private javax.swing.JScrollPane jspTelefones;
    private javax.swing.JTable jtEstoque;
    private javax.swing.JTable jtPedido;
    private javax.swing.JTable jtTelefones;
    private javax.swing.JTextField jtfCodigoCliente;
    private javax.swing.JTextField jtfFiltroAdicional;
    private javax.swing.JTextField jtfFiltroPrincipal;
    private javax.swing.JTextField jtfNome;
    private javax.swing.JTextPane jtpDescricao;
    // End of variables declaration//GEN-END:variables

    public void preencherTabela(ResultSet rs) throws Exception {        
        DefaultTableModel tableModel = new DefaultTableModel();
        ResultSetMetaData metaData = rs.getMetaData();

        int columnCount = metaData.getColumnCount();

        //Get all column names from meta data and add columns to table model
        for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
            tableModel.addColumn(metaData.getColumnLabel(columnIndex));
        }

        //Create array of Objects with size of column count from meta data
        Object[] row = new Object[columnCount];

        //Scroll through result set
        while (rs.next()) {
            //Get object from column with specific index of result set to array of objects
            for (int i = 0; i < columnCount; i++) {
                row[i] = rs.getObject(i + 1);
            }
            //Now add row to table model with that array of objects as an argument
            tableModel.addRow(row);
        }
        
        
        
        //Now add that table model to your table and you are done :D
        jtEstoque.setModel(tableModel);
        jtEstoque.removeColumn(jtEstoque.getColumn("Descrição"));
    }

    public boolean validarQuantidade(int quantidadePedida, int quantidadeEstoque, int multiplo) throws Exception {
        if (quantidadePedida < 1) {
            return false;
        }

        if (quantidadePedida > quantidadeEstoque) {
            return false;
        }
        
        //Deveria validar a multiplicidade...

        return true;
    }

    public boolean validarPreco(float valorUnitario, float preco) throws Exception {
        if (valorUnitario < preco) {
            return false;
        }
        
        return true;
    }
    
    public float calcularValorTotal() {
        float valorTotal = 0;
        
        for (int i = 0; i < jtPedido.getRowCount(); i++) {
            valorTotal += Integer.parseInt(jtPedido.getValueAt(i, 4).toString()) * Float.parseFloat(jtPedido.getValueAt(i, 5).toString());
        }
        
        return valorTotal;
    }


    public boolean preencherObjeto(Pedido p) throws Exception {
        p.setCliente(cliente);
        p.setValorTotal(calcularValorTotal());
        p.setFormaPagamento(jcbFormaPagamento.getSelectedItem().toString());

        p.removerItensPedido();
        //Adicionar os itens do pedido
        for (int i = 0; i < jtPedido.getRowCount(); i++) {
            ItemPedido ip = new ItemPedido();
            ip.setPedido(p);
            ip.setCliente(cliente);
            ip.setProduto(preencherProduto(i));
            ip.setQuantidadePedida((Integer.parseInt(jtPedido.getModel().getValueAt(i, 4).toString())));
            ip.setValorUnitario((Float.parseFloat(jtPedido.getModel().getValueAt(i, 5).toString())));
            p.adicionarItemPedido(ip);
        }
        
        return true;
    }
    
    public Produto preencherProduto(int i) throws Exception {
        Produto produto = new Produto();
        produto.setCodigoProduto(Integer.parseInt(jtPedido.getModel().getValueAt(i, 7).toString()));
        return produto;
    }
}