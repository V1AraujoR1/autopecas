package view;

import java.awt.Graphics;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import model.*;
import data.*;
import utils.*;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.PlainDocument;

public class JIFClientes extends javax.swing.JInternalFrame {

    Campos campos;
    Paineis paineis;
    int clienteAtual = 0;   //Mantém registro de qual o tipo de cliente está atualmente disposto na tela. 1 para Físico e 2 para Jurídico.
    ClienteFisico fisico;
    ClienteJuridico juridico;
    ArrayList<TelefoneCliente> telefones;
    ClienteDAO DAO;

    public JIFClientes() {
        initComponents();

        //Filtro que impossibilita o campo jtfCodigo de receber caracteres que não sejam números.
        PlainDocument docCodigo = (PlainDocument) jtfCodigo.getDocument();
        docCodigo.setDocumentFilter(new FiltroDigitos());

        try {
            campos = new Campos();
            paineis = new Paineis();
            fisico = new ClienteFisico();
            juridico = new ClienteJuridico();
            telefones = new ArrayList<>();
            DAO = new ClienteDAO();
        } catch (Exception e) {
            System.out.println("Erro ao inicializar instância de " + e.getMessage());
        }

        //Inicia todos os campos de forma correta.
        campos.componentsClearText(jpCentro);
        campos.componentsSetEditable(jpCentro, false);
        paineis.componentsSetVisible(jpSul, false);
        jlCodigo.setVisible(false);
        jtfCodigo.setVisible(false);
        jpBotaoAdicionar.setVisible(true);
        jpBotaoPesquisar.setVisible(true);
        jrbFisica.setSelected(true);  
        
        //Define a largura ideal das colunas na tabela de telefones
        jtTelefones.getColumnModel().getColumn(0).setPreferredWidth(110);
        jtTelefones.getColumnModel().getColumn(1).setPreferredWidth(290);
        jtTelefones.setTableHeader(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bgPessoa = new javax.swing.ButtonGroup();
        jpNorte = new javax.swing.JPanel();
        jpTipoCliente = new javax.swing.JPanel();
        jrbFisica = new javax.swing.JRadioButton();
        jrbJuridica = new javax.swing.JRadioButton();
        ImageIcon iconBotaoFechar = new ImageIcon(getClass().getResource("/images/Comum/BotaoFechar.png"));
        Image botaoFechar = iconBotaoFechar.getImage();
        jpFechar = new javax.swing.JPanel() {
            public void paintComponent(Graphics g) {
                g.drawImage(botaoFechar, 0, 0, getWidth(), getHeight(), this);
            }
        };
        jpCentro = new javax.swing.JPanel();
        jlCodigo = new javax.swing.JLabel();
        jtfCodigo = new javax.swing.JTextField();
        jlNome = new javax.swing.JLabel();
        jtfNome = new javax.swing.JTextField();
        jlRazaoSocial = new javax.swing.JLabel();
        jtfRazaoSocial = new javax.swing.JTextField();
        jlCPFCNPJ = new javax.swing.JLabel();
        jtfCPFCNPJ = new javax.swing.JTextField();
        jlRGIE = new javax.swing.JLabel();
        jtfRGIE = new javax.swing.JTextField();
        jlEndereco = new javax.swing.JLabel();
        jlLogradouro = new javax.swing.JLabel();
        jtfLogradouro = new javax.swing.JTextField();
        jlNumero = new javax.swing.JLabel();
        jtfNumero = new javax.swing.JTextField();
        jlBairro = new javax.swing.JLabel();
        jtfBairro = new javax.swing.JTextField();
        jlCidade = new javax.swing.JLabel();
        jtfCidade = new javax.swing.JTextField();
        jlEstado = new javax.swing.JLabel();
        jtfEstado = new javax.swing.JTextField();
        jlCEP = new javax.swing.JLabel();
        jtfCEP = new javax.swing.JTextField();
        jlTelefone = new javax.swing.JLabel();
        jtfTelefone = new javax.swing.JTextField();
        jcbTipoTelefone = new javax.swing.JComboBox<>();
        jbAdicionarTelefone = new javax.swing.JButton();
        jbRemoverTelefone = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTelefones = new javax.swing.JTable();
        jpSul = new javax.swing.JPanel();
        ImageIcon iconBotaoAdicionar = new ImageIcon(getClass().getResource("/images/Comum/BotaoAdicionar.png"));
        Image botaoAdicionar = iconBotaoAdicionar.getImage();
        jpBotaoAdicionar = new javax.swing.JPanel() {
            public void paintComponent(Graphics g) {
                g.drawImage(botaoAdicionar, 0, 0, getWidth(), getHeight(), this);
            }
        };
        ImageIcon iconBotaoPesquisar = new ImageIcon(getClass().getResource("/images/Comum/BotaoPesquisar.png"));
        Image botaoPesquisar = iconBotaoPesquisar.getImage();
        jpBotaoPesquisar = new javax.swing.JPanel() {
            public void paintComponent(Graphics g) {
                g.drawImage(botaoPesquisar, 0, 0, getWidth(), getHeight(), this);
            }
        };
        ImageIcon iconBotaoEditar = new ImageIcon(getClass().getResource("/images/Comum/BotaoEditar.png"));
        Image botaoEditar = iconBotaoEditar.getImage();
        jpBotaoEditar = new javax.swing.JPanel() {
            public void paintComponent(Graphics g) {
                g.drawImage(botaoEditar, 0, 0, getWidth(), getHeight(), this);
            }
        };
        ImageIcon iconBotaoDeletar = new ImageIcon(getClass().getResource("/images/Comum/BotaoDeletar.png"));
        Image botaoDeletar = iconBotaoDeletar.getImage();
        jpBotaoDeletar = new javax.swing.JPanel() {
            public void paintComponent(Graphics g) {
                g.drawImage(botaoDeletar, 0, 0, getWidth(), getHeight(), this);
            }
        };
        ImageIcon iconBotaoVerificar = new ImageIcon(getClass().getResource("/images/Comum/BotaoVerificar.png"));
        Image botaoVerificar = iconBotaoVerificar.getImage();
        jpBotaoVerificar = new javax.swing.JPanel() {
            public void paintComponent(Graphics g) {
                g.drawImage(botaoVerificar, 0, 0, getWidth(), getHeight(), this);
            }
        };
        ImageIcon iconBotaoCancelar = new ImageIcon(getClass().getResource("/images/Comum/BotaoCancelar.png"));
        Image botaoCancelar = iconBotaoCancelar.getImage();
        jpBotaoCancelar = new javax.swing.JPanel() {
            public void paintComponent(Graphics g) {
                g.drawImage(botaoCancelar, 0, 0, getWidth(), getHeight(), this);
            }
        };
        ImageIcon iconBotaoSalvar = new ImageIcon(getClass().getResource("/images/Comum/BotaoSalvar.png"));
        Image botaoSalvar = iconBotaoSalvar.getImage();
        jpBotaoSalvar = new javax.swing.JPanel() {
            public void paintComponent(Graphics g) {
                g.drawImage(botaoSalvar, 0, 0, getWidth(), getHeight(), this);
            }
        };

        setBorder(null);
        setFrameIcon(null);
        setPreferredSize(new java.awt.Dimension(1152, 720));

        jpNorte.setBackground(new java.awt.Color(255, 109, 0));
        jpNorte.setPreferredSize(new java.awt.Dimension(1102, 38));
        jpNorte.setLayout(new java.awt.GridBagLayout());

        jpTipoCliente.setBackground(new java.awt.Color(255, 109, 0));

        jrbFisica.setBackground(new java.awt.Color(255, 109, 0));
        bgPessoa.add(jrbFisica);
        jrbFisica.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jrbFisica.setText("Pessoa Física");
        jrbFisica.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbFisicaItemStateChanged(evt);
            }
        });
        jpTipoCliente.add(jrbFisica);

        jrbJuridica.setBackground(new java.awt.Color(255, 109, 0));
        bgPessoa.add(jrbJuridica);
        jrbJuridica.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jrbJuridica.setText("Pessoa Jurídica");
        jrbJuridica.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbJuridicaItemStateChanged(evt);
            }
        });
        jpTipoCliente.add(jrbJuridica);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jpNorte.add(jpTipoCliente, gridBagConstraints);

        jpFechar.setBackground(new java.awt.Color(255, 0, 0));
        jpFechar.setPreferredSize(new java.awt.Dimension(38, 38));
        jpFechar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpFecharMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpFecharMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jpFecharMouseExited(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jpNorte.add(jpFechar, gridBagConstraints);

        getContentPane().add(jpNorte, java.awt.BorderLayout.NORTH);

        jpCentro.setBackground(new java.awt.Color(255, 209, 0));
        jpCentro.setLayout(new java.awt.GridBagLayout());

        jlCodigo.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlCodigo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlCodigo.setText("Código:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jpCentro.add(jlCodigo, gridBagConstraints);

        jtfCodigo.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtfCodigo.setToolTipText("");
        jtfCodigo.setPreferredSize(new java.awt.Dimension(400, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 20);
        jpCentro.add(jtfCodigo, gridBagConstraints);

        jlNome.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlNome.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlNome.setText("Nome:");
        jlNome.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jpCentro.add(jlNome, gridBagConstraints);

        jtfNome.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtfNome.setToolTipText("");
        jtfNome.setPreferredSize(new java.awt.Dimension(400, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 20);
        jpCentro.add(jtfNome, gridBagConstraints);

        jlRazaoSocial.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlRazaoSocial.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlRazaoSocial.setText("Razão Social:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jpCentro.add(jlRazaoSocial, gridBagConstraints);

        jtfRazaoSocial.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtfRazaoSocial.setToolTipText("");
        jtfRazaoSocial.setPreferredSize(new java.awt.Dimension(400, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 20);
        jpCentro.add(jtfRazaoSocial, gridBagConstraints);

        jlCPFCNPJ.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlCPFCNPJ.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlCPFCNPJ.setText("CPF:");
        jlCPFCNPJ.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jpCentro.add(jlCPFCNPJ, gridBagConstraints);

        jtfCPFCNPJ.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtfCPFCNPJ.setToolTipText("");
        jtfCPFCNPJ.setPreferredSize(new java.awt.Dimension(400, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 20);
        jpCentro.add(jtfCPFCNPJ, gridBagConstraints);

        jlRGIE.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlRGIE.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlRGIE.setText("RG:");
        jlRGIE.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jpCentro.add(jlRGIE, gridBagConstraints);

        jtfRGIE.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtfRGIE.setToolTipText("");
        jtfRGIE.setPreferredSize(new java.awt.Dimension(400, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 20);
        jpCentro.add(jtfRGIE, gridBagConstraints);

        jlEndereco.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlEndereco.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlEndereco.setText("Endereço");
        jlEndereco.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(40, 0, 0, 10);
        jpCentro.add(jlEndereco, gridBagConstraints);

        jlLogradouro.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlLogradouro.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlLogradouro.setText("Logradouro:");
        jlLogradouro.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jpCentro.add(jlLogradouro, gridBagConstraints);

        jtfLogradouro.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtfLogradouro.setToolTipText("");
        jtfLogradouro.setPreferredSize(new java.awt.Dimension(250, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 20);
        jpCentro.add(jtfLogradouro, gridBagConstraints);

        jlNumero.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlNumero.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlNumero.setText("Número:");
        jlNumero.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(10, 170, 0, 20);
        jpCentro.add(jlNumero, gridBagConstraints);

        jtfNumero.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtfNumero.setToolTipText("");
        jtfNumero.setPreferredSize(new java.awt.Dimension(80, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 20);
        jpCentro.add(jtfNumero, gridBagConstraints);

        jlBairro.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlBairro.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlBairro.setText("Bairro:");
        jlBairro.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jpCentro.add(jlBairro, gridBagConstraints);

        jtfBairro.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtfBairro.setToolTipText("");
        jtfBairro.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 20);
        jpCentro.add(jtfBairro, gridBagConstraints);

        jlCidade.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlCidade.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlCidade.setText("Cidade:");
        jlCidade.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 20);
        jpCentro.add(jlCidade, gridBagConstraints);

        jtfCidade.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtfCidade.setToolTipText("");
        jtfCidade.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 20);
        jpCentro.add(jtfCidade, gridBagConstraints);

        jlEstado.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlEstado.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlEstado.setText("Estado:");
        jlEstado.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jpCentro.add(jlEstado, gridBagConstraints);

        jtfEstado.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtfEstado.setToolTipText("");
        jtfEstado.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 20);
        jpCentro.add(jtfEstado, gridBagConstraints);

        jlCEP.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlCEP.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlCEP.setText("CEP:");
        jlCEP.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 20);
        jpCentro.add(jlCEP, gridBagConstraints);

        jtfCEP.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtfCEP.setToolTipText("");
        jtfCEP.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 20);
        jpCentro.add(jtfCEP, gridBagConstraints);

        jlTelefone.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jlTelefone.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlTelefone.setText("Telefones:");
        jlTelefone.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(40, 0, 0, 10);
        jpCentro.add(jlTelefone, gridBagConstraints);

        jtfTelefone.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtfTelefone.setToolTipText("");
        jtfTelefone.setPreferredSize(new java.awt.Dimension(190, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(40, 110, 0, 20);
        jpCentro.add(jtfTelefone, gridBagConstraints);

        jcbTipoTelefone.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jcbTipoTelefone.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Principal", "Comercial", "Residencial", "Celular" }));
        jcbTipoTelefone.setMinimumSize(new java.awt.Dimension(100, 20));
        jcbTipoTelefone.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(40, 0, 0, 20);
        jpCentro.add(jcbTipoTelefone, gridBagConstraints);

        jbAdicionarTelefone.setText("+");
        jbAdicionarTelefone.setPreferredSize(new java.awt.Dimension(40, 20));
        jbAdicionarTelefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdicionarTelefoneActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(40, 0, 0, 70);
        jpCentro.add(jbAdicionarTelefone, gridBagConstraints);

        jbRemoverTelefone.setText("-");
        jbRemoverTelefone.setPreferredSize(new java.awt.Dimension(40, 20));
        jbRemoverTelefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoverTelefoneActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(40, 0, 0, 20);
        jpCentro.add(jbRemoverTelefone, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 70));

        jtTelefones.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jtTelefones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Telefone"
            }
        ));
        jtTelefones.setPreferredSize(null);
        jtTelefones.setRowHeight(20);
        jScrollPane1.setViewportView(jtTelefones);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 20);
        jpCentro.add(jScrollPane1, gridBagConstraints);

        getContentPane().add(jpCentro, java.awt.BorderLayout.CENTER);

        jpSul.setBackground(new java.awt.Color(255, 109, 0));
        jpSul.setMinimumSize(new java.awt.Dimension(1152, 70));
        jpSul.setPreferredSize(new java.awt.Dimension(1152, 70));

        jpBotaoAdicionar.setBackground(new java.awt.Color(41, 98, 255));
        jpBotaoAdicionar.setMaximumSize(new java.awt.Dimension(60, 60));
        jpBotaoAdicionar.setMinimumSize(new java.awt.Dimension(50, 50));
        jpBotaoAdicionar.setPreferredSize(new java.awt.Dimension(60, 60));
        jpBotaoAdicionar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpBotaoAdicionarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpBotaoAdicionarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jpBotaoAdicionarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jpBotaoAdicionarLayout = new javax.swing.GroupLayout(jpBotaoAdicionar);
        jpBotaoAdicionar.setLayout(jpBotaoAdicionarLayout);
        jpBotaoAdicionarLayout.setHorizontalGroup(
            jpBotaoAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        jpBotaoAdicionarLayout.setVerticalGroup(
            jpBotaoAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        jpSul.add(jpBotaoAdicionar);

        jpBotaoPesquisar.setBackground(new java.awt.Color(41, 98, 255));
        jpBotaoPesquisar.setMaximumSize(new java.awt.Dimension(60, 60));
        jpBotaoPesquisar.setMinimumSize(new java.awt.Dimension(50, 50));
        jpBotaoPesquisar.setPreferredSize(new java.awt.Dimension(60, 60));
        jpBotaoPesquisar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpBotaoPesquisarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpBotaoPesquisarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jpBotaoPesquisarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jpBotaoPesquisarLayout = new javax.swing.GroupLayout(jpBotaoPesquisar);
        jpBotaoPesquisar.setLayout(jpBotaoPesquisarLayout);
        jpBotaoPesquisarLayout.setHorizontalGroup(
            jpBotaoPesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        jpBotaoPesquisarLayout.setVerticalGroup(
            jpBotaoPesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        jpSul.add(jpBotaoPesquisar);

        jpBotaoEditar.setBackground(new java.awt.Color(41, 98, 255));
        jpBotaoEditar.setMaximumSize(new java.awt.Dimension(60, 60));
        jpBotaoEditar.setMinimumSize(new java.awt.Dimension(50, 50));
        jpBotaoEditar.setPreferredSize(new java.awt.Dimension(60, 60));
        jpBotaoEditar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpBotaoEditarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpBotaoEditarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jpBotaoEditarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jpBotaoEditarLayout = new javax.swing.GroupLayout(jpBotaoEditar);
        jpBotaoEditar.setLayout(jpBotaoEditarLayout);
        jpBotaoEditarLayout.setHorizontalGroup(
            jpBotaoEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        jpBotaoEditarLayout.setVerticalGroup(
            jpBotaoEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        jpSul.add(jpBotaoEditar);

        jpBotaoDeletar.setBackground(new java.awt.Color(41, 98, 255));
        jpBotaoDeletar.setMaximumSize(new java.awt.Dimension(60, 60));
        jpBotaoDeletar.setMinimumSize(new java.awt.Dimension(50, 50));
        jpBotaoDeletar.setPreferredSize(new java.awt.Dimension(60, 60));
        jpBotaoDeletar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpBotaoDeletarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpBotaoDeletarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jpBotaoDeletarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jpBotaoDeletarLayout = new javax.swing.GroupLayout(jpBotaoDeletar);
        jpBotaoDeletar.setLayout(jpBotaoDeletarLayout);
        jpBotaoDeletarLayout.setHorizontalGroup(
            jpBotaoDeletarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        jpBotaoDeletarLayout.setVerticalGroup(
            jpBotaoDeletarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        jpSul.add(jpBotaoDeletar);

        jpBotaoVerificar.setBackground(new java.awt.Color(41, 98, 255));
        jpBotaoVerificar.setToolTipText("");
        jpBotaoVerificar.setMaximumSize(new java.awt.Dimension(60, 60));
        jpBotaoVerificar.setMinimumSize(new java.awt.Dimension(50, 50));
        jpBotaoVerificar.setPreferredSize(new java.awt.Dimension(60, 60));
        jpBotaoVerificar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpBotaoVerificarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpBotaoVerificarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jpBotaoVerificarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jpBotaoVerificarLayout = new javax.swing.GroupLayout(jpBotaoVerificar);
        jpBotaoVerificar.setLayout(jpBotaoVerificarLayout);
        jpBotaoVerificarLayout.setHorizontalGroup(
            jpBotaoVerificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        jpBotaoVerificarLayout.setVerticalGroup(
            jpBotaoVerificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        jpSul.add(jpBotaoVerificar);

        jpBotaoCancelar.setBackground(new java.awt.Color(41, 98, 255));
        jpBotaoCancelar.setMaximumSize(new java.awt.Dimension(60, 60));
        jpBotaoCancelar.setMinimumSize(new java.awt.Dimension(50, 50));
        jpBotaoCancelar.setPreferredSize(new java.awt.Dimension(60, 60));
        jpBotaoCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpBotaoCancelarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpBotaoCancelarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jpBotaoCancelarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jpBotaoCancelarLayout = new javax.swing.GroupLayout(jpBotaoCancelar);
        jpBotaoCancelar.setLayout(jpBotaoCancelarLayout);
        jpBotaoCancelarLayout.setHorizontalGroup(
            jpBotaoCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        jpBotaoCancelarLayout.setVerticalGroup(
            jpBotaoCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        jpSul.add(jpBotaoCancelar);

        jpBotaoSalvar.setBackground(new java.awt.Color(41, 98, 255));
        jpBotaoSalvar.setToolTipText("");
        jpBotaoSalvar.setMaximumSize(new java.awt.Dimension(60, 60));
        jpBotaoSalvar.setMinimumSize(new java.awt.Dimension(50, 50));
        jpBotaoSalvar.setPreferredSize(new java.awt.Dimension(60, 60));
        jpBotaoSalvar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpBotaoSalvarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jpBotaoSalvarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jpBotaoSalvarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jpBotaoSalvarLayout = new javax.swing.GroupLayout(jpBotaoSalvar);
        jpBotaoSalvar.setLayout(jpBotaoSalvarLayout);
        jpBotaoSalvarLayout.setHorizontalGroup(
            jpBotaoSalvarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        jpBotaoSalvarLayout.setVerticalGroup(
            jpBotaoSalvarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        jpSul.add(jpBotaoSalvar);

        getContentPane().add(jpSul, java.awt.BorderLayout.SOUTH);

        setBounds(0, 0, 1152, 720);
    }// </editor-fold>//GEN-END:initComponents

    private void jpFecharMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpFecharMouseClicked
        if (JOptionPane.showConfirmDialog(this, "Deseja realmente fechar?", "Clientes", 0) == 0) {
            dispose();
        }
    }//GEN-LAST:event_jpFecharMouseClicked

    private void jpFecharMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpFecharMouseEntered
        paineis.componentSetLineBorderColor(jpFechar);
    }//GEN-LAST:event_jpFecharMouseEntered

    private void jpFecharMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpFecharMouseExited
        paineis.componentSetEmptyBorder(jpFechar);
    }//GEN-LAST:event_jpFecharMouseExited

    private void jrbFisicaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbFisicaItemStateChanged
        //1 = Ativado. 2 = Desativado
        if (evt.getStateChange() == 1) {
            jlRazaoSocial.setVisible(false);
            jtfRazaoSocial.setVisible(false);
            jlCPFCNPJ.setText("CPF:");
            jtfCPFCNPJ.setText("");
            jlRGIE.setText("RG:");
            jtfRGIE.setText("");
            clienteAtual = 1;
        } else {
            jlRazaoSocial.setVisible(true);
            jtfRazaoSocial.setVisible(true);
            jlCPFCNPJ.setText("CNPJ:");
            jtfCPFCNPJ.setText("");
            jlRGIE.setText("I.E.:");
            jtfRGIE.setText("");
            clienteAtual = 2;
        }
    }//GEN-LAST:event_jrbFisicaItemStateChanged

    private void jrbJuridicaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbJuridicaItemStateChanged
        //O inverso do botão "Pessoa Física". Por isso, a condição oposta
        if (evt.getStateChange() != 1) {
            jlRazaoSocial.setVisible(false);
            jtfRazaoSocial.setVisible(false);
            jlCPFCNPJ.setText("CPF:");
            jtfCPFCNPJ.setText("");
            jlRGIE.setText("RG:");
            jtfRGIE.setText("");
            clienteAtual = 1;
        } else {
            jlRazaoSocial.setVisible(true);
            jtfRazaoSocial.setVisible(true);
            jlCPFCNPJ.setText("CNPJ:");
            jtfCPFCNPJ.setText("");
            jlRGIE.setText("I.E.:");
            jtfRGIE.setText("");
            clienteAtual = 2;
        }
    }//GEN-LAST:event_jrbJuridicaItemStateChanged

    private void jpBotaoAdicionarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoAdicionarMouseClicked
        //Tudo editável, para que se possa adicionar.
        campos.componentsSetEditable(jpCentro, true);

        //Limita todos os botões, exceto o "Cancelar" e o "Salvar".
        paineis.componentsSetVisible(jpSul, false);
        jpBotaoCancelar.setVisible(true);
        jpBotaoSalvar.setVisible(true);
    }//GEN-LAST:event_jpBotaoAdicionarMouseClicked

    private void jpBotaoAdicionarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoAdicionarMouseEntered
        paineis.componentSetLineBorderColor(jpBotaoAdicionar);
    }//GEN-LAST:event_jpBotaoAdicionarMouseEntered

    private void jpBotaoAdicionarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoAdicionarMouseExited
        paineis.componentSetEmptyBorder(jpBotaoAdicionar);
    }//GEN-LAST:event_jpBotaoAdicionarMouseExited

    private void jpBotaoPesquisarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoPesquisarMouseClicked
        //Apenas o código do cliente pode ser pesquisado e verificado.
        campos.componentsSetEditable(jpCentro, false);
        jlCodigo.setVisible(true);
        jlCodigo.setEnabled(true);
        jtfCodigo.setVisible(true);
        jtfCodigo.setEditable(true);

        //Limita todos os botões, exceto o "Verificar" e "Cancelar".
        paineis.componentsSetVisible(jpSul, false);
        jpBotaoVerificar.setVisible(true);
        jpBotaoCancelar.setVisible(true);
    }//GEN-LAST:event_jpBotaoPesquisarMouseClicked

    private void jpBotaoPesquisarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoPesquisarMouseEntered
        paineis.componentSetLineBorderColor(jpBotaoPesquisar);
    }//GEN-LAST:event_jpBotaoPesquisarMouseEntered

    private void jpBotaoPesquisarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoPesquisarMouseExited
        paineis.componentSetEmptyBorder(jpBotaoPesquisar);
    }//GEN-LAST:event_jpBotaoPesquisarMouseExited

    private void jpBotaoEditarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoEditarMouseClicked
        //Permite editar tudo, exceto o código do cliente atual.
        campos.componentsSetEditable(jpCentro, true);
        jtfCodigo.setEditable(false);
                
        //Limita todos os botões, exceto o "Cancelar" e o "Salvar".
        paineis.componentsSetVisible(jpSul, false);
        jpBotaoCancelar.setVisible(true);
        jpBotaoSalvar.setVisible(true);
    }//GEN-LAST:event_jpBotaoEditarMouseClicked

    private void jpBotaoEditarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoEditarMouseEntered
        paineis.componentSetLineBorderColor(jpBotaoEditar);
    }//GEN-LAST:event_jpBotaoEditarMouseEntered

    private void jpBotaoEditarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoEditarMouseExited
        paineis.componentSetEmptyBorder(jpBotaoEditar);
    }//GEN-LAST:event_jpBotaoEditarMouseExited

    private void jpBotaoDeletarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoDeletarMouseClicked
        //Confirma se o usuário quer de fato deletar o registro pesquisado.
        if (JOptionPane.showConfirmDialog(this, "Deseja deletar permanentemente as informações deste cliente?", "Clientes - Botão Deletar", 0) == 0) {
            try {
                int codigoCliente = Integer.parseInt(jtfCodigo.getText());
                //Deleta os registros do cliente atual no Banco de Dados.
                if (DAO.deletarCliente(codigoCliente, clienteAtual)) {
                    //Mensagem de sucesso para o usuário
                    JOptionPane.showMessageDialog(this, "Cadastro de cliente deletado com sucesso!", "Clientes - Botão Deletar", JOptionPane.INFORMATION_MESSAGE);
                    //Após deletar, aplicar "Cancelar".
                    jpBotaoCancelarMouseClicked(evt);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage(), "Clientes - Botão Deletar", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jpBotaoDeletarMouseClicked

    private void jpBotaoDeletarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoDeletarMouseEntered
        paineis.componentSetLineBorderColor(jpBotaoDeletar);
    }//GEN-LAST:event_jpBotaoDeletarMouseEntered

    private void jpBotaoDeletarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoDeletarMouseExited
        paineis.componentSetEmptyBorder(jpBotaoDeletar);
    }//GEN-LAST:event_jpBotaoDeletarMouseExited

    private void jpBotaoCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoCancelarMouseClicked
        //Como se estivesse abrindo a tela de novo. Porém, limpando todos os campos e sem o detalhe de forçar a seleção para o cliente físico.
        campos.componentsClearText(jpCentro);
        campos.componentsSetEditable(jpCentro, false);
        paineis.componentsSetVisible(jpSul, false);
        jrbFisica.setEnabled(true);
        jrbJuridica.setEnabled(true);
        jlCodigo.setVisible(false);
        jtfCodigo.setVisible(false);
        jpBotaoAdicionar.setVisible(true);
        jpBotaoPesquisar.setVisible(true);
        
        //Limpando possíveis telefones que estejam dentro da JTable "jtTelefones"
        DefaultTableModel mp = (DefaultTableModel) jtTelefones.getModel();
        mp.setRowCount(0);
    }//GEN-LAST:event_jpBotaoCancelarMouseClicked

    private void jpBotaoCancelarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoCancelarMouseEntered
        paineis.componentSetLineBorderColor(jpBotaoCancelar);
    }//GEN-LAST:event_jpBotaoCancelarMouseEntered

    private void jpBotaoCancelarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoCancelarMouseExited
        paineis.componentSetEmptyBorder(jpBotaoCancelar);
    }//GEN-LAST:event_jpBotaoCancelarMouseExited

    private void jpBotaoSalvarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoSalvarMouseClicked
        try {
            if (validarCampos()) {   //Método que valida os campos de forma genérica
                if (clienteAtual == 1) {    //Cliente físico
                    if (validarCamposFisico()) {     //Validação dos campos específicos do cliente físico
                        if (preencherObjeto()) {
                            if (jlCodigo.isVisible() == false) { //Se trata de uma inserção no Banco de Dados
                                if (DAO.inserirCliente(fisico)) {
                                    JOptionPane.showMessageDialog(this, "Cliente físico salvo com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                                    //Limpa a tela após salvar com sucesso.
                                    jpBotaoCancelarMouseClicked(evt);
                                } else {
                                    throw new Exception("ao inserir cliente físico");
                                }
                            } else {    //Se trata de uma atualização no Banco de Dados
                                int codigoCliente = Integer.parseInt(jtfCodigo.getText());
                                if (DAO.editarCliente(fisico, codigoCliente)) {
                                    JOptionPane.showMessageDialog(this, "Cliente físico atualizado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                                    //Limpa a tela após salvar com sucesso.
                                    jpBotaoCancelarMouseClicked(evt);
                                } else {
                                    throw new Exception("ao atualizar cliente físico");
                                }
                            }
                        }
                    }
                }
                if (clienteAtual == 2) {  //Cliente jurídico
                    if (validarCamposJuridico()) {   //Validação dos campos específicos do cliente jurídico
                        if (preencherObjeto()) {
                            if (jlCodigo.isVisible() == false) { //Se trata de uma inserção no Banco de Dados
                                if (DAO.inserirCliente(juridico)) {
                                    JOptionPane.showMessageDialog(this, "Cliente jurídico salvo com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                                    //Limpa a tela após salvar com sucesso.
                                    jpBotaoCancelarMouseClicked(evt);
                                } else {
                                    throw new Exception("ao inserir cliente jurídico");
                                }
                            } else {    //Se trata de uma atualização no Banco de Dados
                                int codigoCliente = Integer.parseInt(jtfCodigo.getText());
                                if (DAO.editarCliente(juridico, codigoCliente)) {
                                    JOptionPane.showMessageDialog(this, "Cliente jurídico atualizado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                                    //Limpa a tela após salvar com sucesso.
                                    jpBotaoCancelarMouseClicked(evt);
                                } else {
                                    throw new Exception("ao atualizar cliente jurídico");
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage(), "Clientes - Botão Salvar", JOptionPane.ERROR_MESSAGE);

            //Caso habilitado, o e.printStackTrace() vai trazer todos os erros e suas devidas linhas no console. Pode vir a ser interessante, caso haja algum bug.
            //e.printStackTrace();
        }
    }//GEN-LAST:event_jpBotaoSalvarMouseClicked

    private void jpBotaoSalvarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoSalvarMouseEntered
        paineis.componentSetLineBorderColor(jpBotaoSalvar);
    }//GEN-LAST:event_jpBotaoSalvarMouseEntered

    private void jpBotaoSalvarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoSalvarMouseExited
        paineis.componentSetEmptyBorder(jpBotaoSalvar);
    }//GEN-LAST:event_jpBotaoSalvarMouseExited

    private void jpBotaoVerificarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoVerificarMouseClicked
        try {
            int pesquisa = Integer.parseInt(jtfCodigo.getText());
            if (clienteAtual == 1) {
                fisico = DAO.pesquisarClienteFisico(pesquisa);
                jtfNome.setText(fisico.getNome());
                jtfLogradouro.setText(fisico.getLogradouro());
                jtfNumero.setText(String.valueOf(fisico.getNumero()));
                jtfBairro.setText(fisico.getBairro());
                jtfCidade.setText(fisico.getCidade());
                jtfEstado.setText(fisico.getEstado());
                jtfCEP.setText(fisico.getCEP());
                jtfCPFCNPJ.setText(fisico.getCPF());
                jtfRGIE.setText(fisico.getRG());
            } else {
                juridico = DAO.pesquisarClienteJuridico(pesquisa);
                jtfNome.setText(juridico.getNome());
                jtfLogradouro.setText(juridico.getLogradouro());
                jtfNumero.setText(String.valueOf(juridico.getNumero()));
                jtfBairro.setText(juridico.getBairro());
                jtfCidade.setText(juridico.getCidade());
                jtfEstado.setText(juridico.getEstado());
                jtfCEP.setText(juridico.getCEP());
                jtfCPFCNPJ.setText(juridico.getCNPJ());
                jtfRGIE.setText(juridico.getInscricaoEstadual());
                jtfRazaoSocial.setText(juridico.getRazaoSocial());
            }
            
            //Adicionando os telefones à tabela.
            DefaultTableModel mp = (DefaultTableModel) jtTelefones.getModel();
            for (TelefoneCliente telefone : fisico.getTelefones()) {
                mp.addRow(new Object[]{telefone.getTipo(), telefone.getTelefone()});
            }
            
            //Limita todos os botões, exceto o "Editar", "Deletar" e "Cancelar".
            paineis.componentsSetVisible(jpSul, false);
            jpBotaoEditar.setVisible(true);
            jpBotaoDeletar.setVisible(true);
            jpBotaoCancelar.setVisible(true);
            
            //Inclusive, limita o usuário de alterar o tipo de cliente e o código do cliente informado.
            jrbFisica.setEnabled(false);
            jrbJuridica.setEnabled(false);
            jtfCodigo.setEditable(false);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage(), "Clientes - Botão Verificar", JOptionPane.ERROR_MESSAGE);
            //e.printStackTrace();
        }
    }//GEN-LAST:event_jpBotaoVerificarMouseClicked

    private void jpBotaoVerificarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoVerificarMouseEntered
        paineis.componentSetLineBorderColor(jpBotaoVerificar);
    }//GEN-LAST:event_jpBotaoVerificarMouseEntered

    private void jpBotaoVerificarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpBotaoVerificarMouseExited
        paineis.componentSetEmptyBorder(jpBotaoVerificar);
    }//GEN-LAST:event_jpBotaoVerificarMouseExited

    private void jbAdicionarTelefoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdicionarTelefoneActionPerformed
        try {
            if (validarTelefone()) {
                DefaultTableModel mp = (DefaultTableModel) jtTelefones.getModel();
                mp.addRow(new Object[]{jcbTipoTelefone.getSelectedItem().toString(), jtfTelefone.getText()});
                jtfTelefone.setText("");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage(), "Telefones - Botão Adicionar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbAdicionarTelefoneActionPerformed

    private void jbRemoverTelefoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoverTelefoneActionPerformed
        try {
            DefaultTableModel mp = (DefaultTableModel) jtTelefones.getModel();
            mp.removeRow(jtTelefones.getSelectedRow());
            jtTelefones.setModel(mp);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: selecione um telefone para ser removido", "Telefones - Botão Remover", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbRemoverTelefoneActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgPessoa;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAdicionarTelefone;
    private javax.swing.JButton jbRemoverTelefone;
    private javax.swing.JComboBox<String> jcbTipoTelefone;
    private javax.swing.JLabel jlBairro;
    private javax.swing.JLabel jlCEP;
    private javax.swing.JLabel jlCPFCNPJ;
    private javax.swing.JLabel jlCidade;
    private javax.swing.JLabel jlCodigo;
    private javax.swing.JLabel jlEndereco;
    private javax.swing.JLabel jlEstado;
    private javax.swing.JLabel jlLogradouro;
    private javax.swing.JLabel jlNome;
    private javax.swing.JLabel jlNumero;
    private javax.swing.JLabel jlRGIE;
    private javax.swing.JLabel jlRazaoSocial;
    private javax.swing.JLabel jlTelefone;
    private javax.swing.JPanel jpBotaoAdicionar;
    private javax.swing.JPanel jpBotaoCancelar;
    private javax.swing.JPanel jpBotaoDeletar;
    private javax.swing.JPanel jpBotaoEditar;
    private javax.swing.JPanel jpBotaoPesquisar;
    private javax.swing.JPanel jpBotaoSalvar;
    private javax.swing.JPanel jpBotaoVerificar;
    private javax.swing.JPanel jpCentro;
    private javax.swing.JPanel jpFechar;
    private javax.swing.JPanel jpNorte;
    private javax.swing.JPanel jpSul;
    private javax.swing.JPanel jpTipoCliente;
    private javax.swing.JRadioButton jrbFisica;
    private javax.swing.JRadioButton jrbJuridica;
    private javax.swing.JTable jtTelefones;
    private javax.swing.JTextField jtfBairro;
    private javax.swing.JTextField jtfCEP;
    private javax.swing.JTextField jtfCPFCNPJ;
    private javax.swing.JTextField jtfCidade;
    private javax.swing.JTextField jtfCodigo;
    private javax.swing.JTextField jtfEstado;
    private javax.swing.JTextField jtfLogradouro;
    private javax.swing.JTextField jtfNome;
    private javax.swing.JTextField jtfNumero;
    private javax.swing.JTextField jtfRGIE;
    private javax.swing.JTextField jtfRazaoSocial;
    private javax.swing.JTextField jtfTelefone;
    // End of variables declaration//GEN-END:variables

    public boolean validarCampos() throws Exception {
        if (jtfNome.getText().trim().length() > 0 && jtfNome.getText().trim().length() <= 200) {
            if (jtfLogradouro.getText().trim().length() > 0 && jtfLogradouro.getText().trim().length() <= 200) {
                try {
                    Integer.parseInt(jtfNumero.getText());
                } catch (NumberFormatException e) {
                    throw new Exception("insira um número de endereço válido");
                }
                if (Integer.parseInt(jtfNumero.getText()) > 0) {
                    if (jtfBairro.getText().trim().length() > 0 && jtfBairro.getText().trim().length() <= 100) {
                        if (jtfCidade.getText().trim().length() > 0 && jtfCidade.getText().trim().length() <= 100) {
                            if (jtfEstado.getText().trim().length() >= 2 && jtfEstado.getText().trim().length() <= 50) {
                                if (jtfCEP.getText().trim().length() == 9) {
                                    return true;
                                } else {
                                    jtfCEP.requestFocus();
                                    throw new Exception("CEP inválido");
                                }
                            } else {
                                jtfEstado.requestFocus();
                                throw new Exception("o estado deve conter pelo menos dois e no máximo cinquenta caracteres");
                            }
                        } else {
                            jtfCidade.requestFocus();
                            throw new Exception("a cidade deve conter pelo menos um e no máximo cem caracteres");
                        }
                    } else {
                        jtfBairro.requestFocus();
                        throw new Exception("o bairro deve conter pelo menos um e no máximo cem caracteres");
                    }
                } else {
                    jtfNumero.requestFocus();
                    throw new Exception("o número do endereço deve ser positivo");
                }
            } else {
                jtfLogradouro.requestFocus();
                throw new Exception("o logradouro deve conter pelo menos um e no máximo duzentos caracteres");
            }
        } else {
            jtfNome.requestFocus();
            throw new Exception("o nome deve conter pelo menos um e no máximo duzentos caracteres");
        }
    }

    public boolean validarCamposFisico() throws Exception {
        if (jtfCPFCNPJ.getText().trim().length() > 0 && jtfCPFCNPJ.getText().trim().length() <= 14) {
            if (jtfRGIE.getText().trim().length() > 0 && jtfRGIE.getText().trim().length() <= 12) {
                return true;
            } else {
                jtfRGIE.requestFocus();
                throw new Exception("RG inválido");
            }
        } else {
            jtfCPFCNPJ.requestFocus();
            throw new Exception("CPF inválido");
        }
    }

    public boolean validarCamposJuridico() throws Exception {
        if (jtfCPFCNPJ.getText().trim().length() > 0 && jtfCPFCNPJ.getText().trim().length() <= 18) {
            if (jtfRGIE.getText().trim().length() > 0 && jtfRGIE.getText().trim().length() <= 12) {
                if (jtfRazaoSocial.getText().trim().length() > 0 && jtfRazaoSocial.getText().trim().length() <= 250) {
                    return true;
                } else {
                    jtfRazaoSocial.requestFocus();
                    throw new Exception("a razão social deve conter pelo menos um e no máximo duzentos e cinquenta caracteres");
                }
            } else {
                jtfRGIE.requestFocus();
                throw new Exception("Inscrição Estadual inválida");
            }
        } else {
            jtfCPFCNPJ.requestFocus();
            throw new Exception("CNPJ inválido");
        }
    }

    private boolean validarTelefone() throws Exception {
        if (jtfTelefone.getText().trim().length() > 0) {
            if (jtfTelefone.getText().trim().length() <= 20) {
                String t = jtfTelefone.getText();

                for (int i = 0; i < jtTelefones.getRowCount(); i++) {
                    //Caso o telefone que o usuário deseja inserir já tenha sido inserido, throw Exception!
                    if (t.equals(jtTelefones.getModel().getValueAt(i, 1).toString())) {
                        throw new Exception("número de telefone já inserido");
                    }
                }
                //Caso não tenha sido inserido ainda, return true.
                return true;
            } else {
                throw new Exception("número de telefone excede o limite de vinte dígitos");
            }
        } else {
            throw new Exception("para adicionar um telefone à lista, insira um número de telefone");
        }
    }

    public boolean preencherObjeto() throws Exception {
        if (clienteAtual == 1) {
            //Cliente físico
            preencherObjeto(fisico);
            fisico.setCPF(jtfCPFCNPJ.getText());
            fisico.setRG(jtfRGIE.getText());
        } else {
            if (clienteAtual == 2) {
                //Cliente jurídico
                preencherObjeto(juridico);
                juridico.setCNPJ(jtfCPFCNPJ.getText());
                juridico.setInscricaoEstadual(jtfRGIE.getText());
                juridico.setRazaoSocial(jtfRazaoSocial.getText());
            } else {
                //Nenhum cliente selecionado.
                throw new Exception("nenhum cliente selecionado");
            }
        }

        return true;
    }

    public void preencherObjeto(Cliente c) throws Exception {
        c.setNome(jtfNome.getText());
        c.setLogradouro(jtfLogradouro.getText());
        c.setNumero(Integer.parseInt(jtfNumero.getText()));
        c.setBairro(jtfBairro.getText());
        c.setCidade(jtfCidade.getText());
        c.setEstado(jtfEstado.getText());
        c.setCEP(jtfCEP.getText());

        //Essa função é imprescindível! Descobri na prática que o ArrayList fica "sujo" de informações "velhas" caso o usuário esteja atualizando os telefones de um cliente já existente.
        //Com essa função, toda vez antes de preenchermos o objeto, certificamos de limpar o ArrayList e inserir apenas aquilo que vier da tela. Sem possíveis duplicatas!
        c.removerTelefones();
        //Adicionar os telefones
        for (int i = 0; i < jtTelefones.getRowCount(); i++) {
            TelefoneCliente t = new TelefoneCliente();
            t.setTelefone(jtTelefones.getModel().getValueAt(i, 1).toString());
            t.setTipo(jtTelefones.getModel().getValueAt(i, 0).toString());
            c.adicionarTelefone(t);
        }
    }
}
